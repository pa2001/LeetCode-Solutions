/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        //initialise a vector of vector to return answer
        vector<vector<int>>ans;
        //base case
        if(root==NULL)
            return ans;
        //initialise queue to have your level order traversal
        queue<Node*>q;
        q.push(root);
        while(!q.empty())
        {
            int n=q.size();
            vector<int>res;
            //put all the queue element in a single vector because they lie on the same level
            for(int i=0;i<n;i++)
            {
                Node* k=q.front();
                q.pop();
                res.push_back(k->val);
                //put all the child nodes of particular node into queue to have your next level.
                vector<Node*>v=k->children;
                for(int j=0;j<v.size();j++)
                    q.push(v[j]);
            }//put one level vector into our ans vector 
            ans.push_back(res);
        }return ans;
    }
};
